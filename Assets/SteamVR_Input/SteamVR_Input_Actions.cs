// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Boolean p_default_InteractUI;
        
        private static SteamVR_Action_Boolean p_default_Teleport;
        
        private static SteamVR_Action_Boolean p_default_GrabPinch;
        
        private static SteamVR_Action_Boolean p_default_GrabGrip;
        
        private static SteamVR_Action_Pose p_default_Pose;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonRightHand;
        
        private static SteamVR_Action_Single p_default_Squeeze;
        
        private static SteamVR_Action_Boolean p_default_HeadsetOnHead;
        
        private static SteamVR_Action_Boolean p_default_NextGunAction;
        
        private static SteamVR_Action_Boolean p_default_PrevGunAction;
        
        private static SteamVR_Action_Boolean p_default_NextScopeAction;
        
        private static SteamVR_Action_Boolean p_default_PrevScopeAction;
        
        private static SteamVR_Action_Vibration p_default_Haptic;
        
        private static SteamVR_Action_Single p_kngGuns1_ShootGunSqueezAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_ReloadGunAction;
        
        private static SteamVR_Action_Single p_kngGuns1_SwitchGunSwipeAction;
        
        private static SteamVR_Action_Single p_kngGuns1_SwitchScopeSwipeAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_GrabReleaseGunAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_ShootGunClickAction;
        
        private static SteamVR_Action_Vector2 p_kngGuns1_DpadAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_SwapGunsClick;
        
        private static SteamVR_Action_Boolean p_kngGuns1_TouchedPadAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_NextScopeAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_PrevScopeAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_NextGunAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_PrevGunAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_StopShootGunAction;
        
        private static SteamVR_Action_Boolean p_kngGuns1_PuckMid;
        
        private static SteamVR_Action_Boolean p_kngGuns1_PuckForward;
        
        private static SteamVR_Action_Boolean p_kngGuns1_PuckLetf;
        
        private static SteamVR_Action_Boolean p_kngGuns1_PuckRight;
        
        private static SteamVR_Action_Boolean p_newSet_ActionMid;
        
        private static SteamVR_Action_Boolean p_newSet_ActionForward;
        
        private static SteamVR_Action_Boolean p_newSet_NewAction;
        
        public static SteamVR_Action_Boolean default_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_default_InteractUI.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_Teleport
        {
            get
            {
                return SteamVR_Actions.p_default_Teleport.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabPinch
        {
            get
            {
                return SteamVR_Actions.p_default_GrabPinch.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabGrip
        {
            get
            {
                return SteamVR_Actions.p_default_GrabGrip.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose default_Pose
        {
            get
            {
                return SteamVR_Actions.p_default_Pose.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonLeftHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonRightHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Single default_Squeeze
        {
            get
            {
                return SteamVR_Actions.p_default_Squeeze.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean default_HeadsetOnHead
        {
            get
            {
                return SteamVR_Actions.p_default_HeadsetOnHead.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_NextGunAction
        {
            get
            {
                return SteamVR_Actions.p_default_NextGunAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_PrevGunAction
        {
            get
            {
                return SteamVR_Actions.p_default_PrevGunAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_NextScopeAction
        {
            get
            {
                return SteamVR_Actions.p_default_NextScopeAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_PrevScopeAction
        {
            get
            {
                return SteamVR_Actions.p_default_PrevScopeAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration default_Haptic
        {
            get
            {
                return SteamVR_Actions.p_default_Haptic.GetCopy <SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Single kngGuns1_ShootGunSqueezAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_ShootGunSqueezAction.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_ReloadGunAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_ReloadGunAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Single kngGuns1_SwitchGunSwipeAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_SwitchGunSwipeAction.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Single kngGuns1_SwitchScopeSwipeAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_SwitchScopeSwipeAction.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_GrabReleaseGunAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_GrabReleaseGunAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_ShootGunClickAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_ShootGunClickAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 kngGuns1_DpadAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_DpadAction.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_SwapGunsClick
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_SwapGunsClick.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_TouchedPadAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_TouchedPadAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_NextScopeAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_NextScopeAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_PrevScopeAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_PrevScopeAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_NextGunAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_NextGunAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_PrevGunAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_PrevGunAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_StopShootGunAction
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_StopShootGunAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_PuckMid
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_PuckMid.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_PuckForward
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_PuckForward.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_PuckLetf
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_PuckLetf.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean kngGuns1_PuckRight
        {
            get
            {
                return SteamVR_Actions.p_kngGuns1_PuckRight.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean newSet_ActionMid
        {
            get
            {
                return SteamVR_Actions.p_newSet_ActionMid.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean newSet_ActionForward
        {
            get
            {
                return SteamVR_Actions.p_newSet_ActionForward.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean newSet_NewAction
        {
            get
            {
                return SteamVR_Actions.p_newSet_NewAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_NextGunAction,
                    SteamVR_Actions.default_PrevGunAction,
                    SteamVR_Actions.default_NextScopeAction,
                    SteamVR_Actions.default_PrevScopeAction,
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.kngGuns1_ShootGunSqueezAction,
                    SteamVR_Actions.kngGuns1_ReloadGunAction,
                    SteamVR_Actions.kngGuns1_SwitchGunSwipeAction,
                    SteamVR_Actions.kngGuns1_SwitchScopeSwipeAction,
                    SteamVR_Actions.kngGuns1_GrabReleaseGunAction,
                    SteamVR_Actions.kngGuns1_ShootGunClickAction,
                    SteamVR_Actions.kngGuns1_DpadAction,
                    SteamVR_Actions.kngGuns1_SwapGunsClick,
                    SteamVR_Actions.kngGuns1_TouchedPadAction,
                    SteamVR_Actions.kngGuns1_NextScopeAction,
                    SteamVR_Actions.kngGuns1_PrevScopeAction,
                    SteamVR_Actions.kngGuns1_NextGunAction,
                    SteamVR_Actions.kngGuns1_PrevGunAction,
                    SteamVR_Actions.kngGuns1_StopShootGunAction,
                    SteamVR_Actions.kngGuns1_PuckMid,
                    SteamVR_Actions.kngGuns1_PuckForward,
                    SteamVR_Actions.kngGuns1_PuckLetf,
                    SteamVR_Actions.kngGuns1_PuckRight,
                    SteamVR_Actions.newSet_ActionMid,
                    SteamVR_Actions.newSet_ActionForward,
                    SteamVR_Actions.newSet_NewAction};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_NextGunAction,
                    SteamVR_Actions.default_PrevGunAction,
                    SteamVR_Actions.default_NextScopeAction,
                    SteamVR_Actions.default_PrevScopeAction,
                    SteamVR_Actions.kngGuns1_ShootGunSqueezAction,
                    SteamVR_Actions.kngGuns1_ReloadGunAction,
                    SteamVR_Actions.kngGuns1_SwitchGunSwipeAction,
                    SteamVR_Actions.kngGuns1_SwitchScopeSwipeAction,
                    SteamVR_Actions.kngGuns1_GrabReleaseGunAction,
                    SteamVR_Actions.kngGuns1_ShootGunClickAction,
                    SteamVR_Actions.kngGuns1_DpadAction,
                    SteamVR_Actions.kngGuns1_SwapGunsClick,
                    SteamVR_Actions.kngGuns1_TouchedPadAction,
                    SteamVR_Actions.kngGuns1_NextScopeAction,
                    SteamVR_Actions.kngGuns1_PrevScopeAction,
                    SteamVR_Actions.kngGuns1_NextGunAction,
                    SteamVR_Actions.kngGuns1_PrevGunAction,
                    SteamVR_Actions.kngGuns1_StopShootGunAction,
                    SteamVR_Actions.kngGuns1_PuckMid,
                    SteamVR_Actions.kngGuns1_PuckForward,
                    SteamVR_Actions.kngGuns1_PuckLetf,
                    SteamVR_Actions.kngGuns1_PuckRight,
                    SteamVR_Actions.newSet_ActionMid,
                    SteamVR_Actions.newSet_ActionForward,
                    SteamVR_Actions.newSet_NewAction};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[]
            {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[]
            {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[]
            {
                    SteamVR_Actions.default_Pose};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_NextGunAction,
                    SteamVR_Actions.default_PrevGunAction,
                    SteamVR_Actions.default_NextScopeAction,
                    SteamVR_Actions.default_PrevScopeAction,
                    SteamVR_Actions.kngGuns1_ReloadGunAction,
                    SteamVR_Actions.kngGuns1_GrabReleaseGunAction,
                    SteamVR_Actions.kngGuns1_ShootGunClickAction,
                    SteamVR_Actions.kngGuns1_SwapGunsClick,
                    SteamVR_Actions.kngGuns1_TouchedPadAction,
                    SteamVR_Actions.kngGuns1_NextScopeAction,
                    SteamVR_Actions.kngGuns1_PrevScopeAction,
                    SteamVR_Actions.kngGuns1_NextGunAction,
                    SteamVR_Actions.kngGuns1_PrevGunAction,
                    SteamVR_Actions.kngGuns1_StopShootGunAction,
                    SteamVR_Actions.kngGuns1_PuckMid,
                    SteamVR_Actions.kngGuns1_PuckForward,
                    SteamVR_Actions.kngGuns1_PuckLetf,
                    SteamVR_Actions.kngGuns1_PuckRight,
                    SteamVR_Actions.newSet_ActionMid,
                    SteamVR_Actions.newSet_ActionForward,
                    SteamVR_Actions.newSet_NewAction};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[]
            {
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.kngGuns1_ShootGunSqueezAction,
                    SteamVR_Actions.kngGuns1_SwitchGunSwipeAction,
                    SteamVR_Actions.kngGuns1_SwitchScopeSwipeAction};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[]
            {
                    SteamVR_Actions.kngGuns1_DpadAction};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[]
            {
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand};
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_NextGunAction,
                    SteamVR_Actions.default_PrevGunAction,
                    SteamVR_Actions.default_NextScopeAction,
                    SteamVR_Actions.default_PrevScopeAction,
                    SteamVR_Actions.kngGuns1_ShootGunSqueezAction,
                    SteamVR_Actions.kngGuns1_ReloadGunAction,
                    SteamVR_Actions.kngGuns1_SwitchGunSwipeAction,
                    SteamVR_Actions.kngGuns1_SwitchScopeSwipeAction,
                    SteamVR_Actions.kngGuns1_GrabReleaseGunAction,
                    SteamVR_Actions.kngGuns1_ShootGunClickAction,
                    SteamVR_Actions.kngGuns1_DpadAction,
                    SteamVR_Actions.kngGuns1_SwapGunsClick,
                    SteamVR_Actions.kngGuns1_TouchedPadAction,
                    SteamVR_Actions.kngGuns1_NextScopeAction,
                    SteamVR_Actions.kngGuns1_PrevScopeAction,
                    SteamVR_Actions.kngGuns1_NextGunAction,
                    SteamVR_Actions.kngGuns1_PrevGunAction,
                    SteamVR_Actions.kngGuns1_StopShootGunAction,
                    SteamVR_Actions.kngGuns1_PuckMid,
                    SteamVR_Actions.kngGuns1_PuckForward,
                    SteamVR_Actions.kngGuns1_PuckLetf,
                    SteamVR_Actions.kngGuns1_PuckRight,
                    SteamVR_Actions.newSet_ActionMid,
                    SteamVR_Actions.newSet_ActionForward,
                    SteamVR_Actions.newSet_NewAction};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_default_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/InteractUI")));
            SteamVR_Actions.p_default_Teleport = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/Teleport")));
            SteamVR_Actions.p_default_GrabPinch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/GrabPinch")));
            SteamVR_Actions.p_default_GrabGrip = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/GrabGrip")));
            SteamVR_Actions.p_default_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/default/in/Pose")));
            SteamVR_Actions.p_default_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/default/in/SkeletonLeftHand")));
            SteamVR_Actions.p_default_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/default/in/SkeletonRightHand")));
            SteamVR_Actions.p_default_Squeeze = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/default/in/Squeeze")));
            SteamVR_Actions.p_default_HeadsetOnHead = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/HeadsetOnHead")));
            SteamVR_Actions.p_default_NextGunAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/NextGunAction")));
            SteamVR_Actions.p_default_PrevGunAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/PrevGunAction")));
            SteamVR_Actions.p_default_NextScopeAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/NextScopeAction")));
            SteamVR_Actions.p_default_PrevScopeAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/PrevScopeAction")));
            SteamVR_Actions.p_default_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create <SteamVR_Action_Vibration>("/actions/default/out/Haptic")));
            SteamVR_Actions.p_kngGuns1_ShootGunSqueezAction = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/KngGuns1/in/ShootGunSqueezAction")));
            SteamVR_Actions.p_kngGuns1_ReloadGunAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/ReloadGunAction")));
            SteamVR_Actions.p_kngGuns1_SwitchGunSwipeAction = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/KngGuns1/in/SwitchGunSwipeAction")));
            SteamVR_Actions.p_kngGuns1_SwitchScopeSwipeAction = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/KngGuns1/in/SwitchScopeSwipeAction")));
            SteamVR_Actions.p_kngGuns1_GrabReleaseGunAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/GrabReleaseGunAction")));
            SteamVR_Actions.p_kngGuns1_ShootGunClickAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/ShootGunClickAction")));
            SteamVR_Actions.p_kngGuns1_DpadAction = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/KngGuns1/in/DpadAction")));
            SteamVR_Actions.p_kngGuns1_SwapGunsClick = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/SwapGunsClick")));
            SteamVR_Actions.p_kngGuns1_TouchedPadAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/TouchedPadAction")));
            SteamVR_Actions.p_kngGuns1_NextScopeAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/NextScopeAction")));
            SteamVR_Actions.p_kngGuns1_PrevScopeAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/PrevScopeAction")));
            SteamVR_Actions.p_kngGuns1_NextGunAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/NextGunAction")));
            SteamVR_Actions.p_kngGuns1_PrevGunAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/PrevGunAction")));
            SteamVR_Actions.p_kngGuns1_StopShootGunAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/StopShootGunAction")));
            SteamVR_Actions.p_kngGuns1_PuckMid = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/PuckMid")));
            SteamVR_Actions.p_kngGuns1_PuckForward = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/PuckForward")));
            SteamVR_Actions.p_kngGuns1_PuckLetf = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/PuckLetf")));
            SteamVR_Actions.p_kngGuns1_PuckRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/KngGuns1/in/PuckRight")));
            SteamVR_Actions.p_newSet_ActionMid = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/NewSet/in/ActionMid")));
            SteamVR_Actions.p_newSet_ActionForward = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/NewSet/in/ActionForward")));
            SteamVR_Actions.p_newSet_NewAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/NewSet/in/NewAction")));
        }
    }
}
